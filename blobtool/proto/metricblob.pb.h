// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metricblob.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metricblob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metricblob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metricblob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metricblob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metricblob_2eproto;
namespace bmcmetrics {
namespace metricproto {
class BmcDiskSpaceMetric;
class BmcDiskSpaceMetricDefaultTypeInternal;
extern BmcDiskSpaceMetricDefaultTypeInternal _BmcDiskSpaceMetric_default_instance_;
class BmcFdStatMetric;
class BmcFdStatMetricDefaultTypeInternal;
extern BmcFdStatMetricDefaultTypeInternal _BmcFdStatMetric_default_instance_;
class BmcFdStatMetric_BmcFdStat;
class BmcFdStatMetric_BmcFdStatDefaultTypeInternal;
extern BmcFdStatMetric_BmcFdStatDefaultTypeInternal _BmcFdStatMetric_BmcFdStat_default_instance_;
class BmcMemoryMetric;
class BmcMemoryMetricDefaultTypeInternal;
extern BmcMemoryMetricDefaultTypeInternal _BmcMemoryMetric_default_instance_;
class BmcMetricSnapshot;
class BmcMetricSnapshotDefaultTypeInternal;
extern BmcMetricSnapshotDefaultTypeInternal _BmcMetricSnapshot_default_instance_;
class BmcProcStatMetric;
class BmcProcStatMetricDefaultTypeInternal;
extern BmcProcStatMetricDefaultTypeInternal _BmcProcStatMetric_default_instance_;
class BmcProcStatMetric_BmcProcStat;
class BmcProcStatMetric_BmcProcStatDefaultTypeInternal;
extern BmcProcStatMetric_BmcProcStatDefaultTypeInternal _BmcProcStatMetric_BmcProcStat_default_instance_;
class BmcStringTable;
class BmcStringTableDefaultTypeInternal;
extern BmcStringTableDefaultTypeInternal _BmcStringTable_default_instance_;
class BmcStringTable_StringEntry;
class BmcStringTable_StringEntryDefaultTypeInternal;
extern BmcStringTable_StringEntryDefaultTypeInternal _BmcStringTable_StringEntry_default_instance_;
class BmcUptimeMetric;
class BmcUptimeMetricDefaultTypeInternal;
extern BmcUptimeMetricDefaultTypeInternal _BmcUptimeMetric_default_instance_;
}  // namespace metricproto
}  // namespace bmcmetrics
PROTOBUF_NAMESPACE_OPEN
template<> ::bmcmetrics::metricproto::BmcDiskSpaceMetric* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcDiskSpaceMetric>(Arena*);
template<> ::bmcmetrics::metricproto::BmcFdStatMetric* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcFdStatMetric>(Arena*);
template<> ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat>(Arena*);
template<> ::bmcmetrics::metricproto::BmcMemoryMetric* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcMemoryMetric>(Arena*);
template<> ::bmcmetrics::metricproto::BmcMetricSnapshot* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcMetricSnapshot>(Arena*);
template<> ::bmcmetrics::metricproto::BmcProcStatMetric* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcProcStatMetric>(Arena*);
template<> ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat>(Arena*);
template<> ::bmcmetrics::metricproto::BmcStringTable* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcStringTable>(Arena*);
template<> ::bmcmetrics::metricproto::BmcStringTable_StringEntry* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcStringTable_StringEntry>(Arena*);
template<> ::bmcmetrics::metricproto::BmcUptimeMetric* Arena::CreateMaybeMessage<::bmcmetrics::metricproto::BmcUptimeMetric>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bmcmetrics {
namespace metricproto {

// ===================================================================

class BmcMemoryMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcMemoryMetric) */ {
 public:
  inline BmcMemoryMetric() : BmcMemoryMetric(nullptr) {};
  virtual ~BmcMemoryMetric();

  BmcMemoryMetric(const BmcMemoryMetric& from);
  BmcMemoryMetric(BmcMemoryMetric&& from) noexcept
    : BmcMemoryMetric() {
    *this = ::std::move(from);
  }

  inline BmcMemoryMetric& operator=(const BmcMemoryMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcMemoryMetric& operator=(BmcMemoryMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcMemoryMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcMemoryMetric* internal_default_instance() {
    return reinterpret_cast<const BmcMemoryMetric*>(
               &_BmcMemoryMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BmcMemoryMetric& a, BmcMemoryMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcMemoryMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcMemoryMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcMemoryMetric* New() const final {
    return CreateMaybeMessage<BmcMemoryMetric>(nullptr);
  }

  BmcMemoryMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcMemoryMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcMemoryMetric& from);
  void MergeFrom(const BmcMemoryMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcMemoryMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcMemoryMetric";
  }
  protected:
  explicit BmcMemoryMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemAvailableFieldNumber = 1,
    kSlabFieldNumber = 2,
    kKernelStackFieldNumber = 3,
  };
  // int32 mem_available = 1;
  void clear_mem_available();
  ::PROTOBUF_NAMESPACE_ID::int32 mem_available() const;
  void set_mem_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mem_available() const;
  void _internal_set_mem_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 slab = 2;
  void clear_slab();
  ::PROTOBUF_NAMESPACE_ID::int32 slab() const;
  void set_slab(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slab() const;
  void _internal_set_slab(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kernel_stack = 3;
  void clear_kernel_stack();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_stack() const;
  void set_kernel_stack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_stack() const;
  void _internal_set_kernel_stack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcMemoryMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mem_available_;
  ::PROTOBUF_NAMESPACE_ID::int32 slab_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_stack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcUptimeMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcUptimeMetric) */ {
 public:
  inline BmcUptimeMetric() : BmcUptimeMetric(nullptr) {};
  virtual ~BmcUptimeMetric();

  BmcUptimeMetric(const BmcUptimeMetric& from);
  BmcUptimeMetric(BmcUptimeMetric&& from) noexcept
    : BmcUptimeMetric() {
    *this = ::std::move(from);
  }

  inline BmcUptimeMetric& operator=(const BmcUptimeMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcUptimeMetric& operator=(BmcUptimeMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcUptimeMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcUptimeMetric* internal_default_instance() {
    return reinterpret_cast<const BmcUptimeMetric*>(
               &_BmcUptimeMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BmcUptimeMetric& a, BmcUptimeMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcUptimeMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcUptimeMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcUptimeMetric* New() const final {
    return CreateMaybeMessage<BmcUptimeMetric>(nullptr);
  }

  BmcUptimeMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcUptimeMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcUptimeMetric& from);
  void MergeFrom(const BmcUptimeMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcUptimeMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcUptimeMetric";
  }
  protected:
  explicit BmcUptimeMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeFieldNumber = 1,
    kIdleProcessTimeFieldNumber = 2,
  };
  // float uptime = 1;
  void clear_uptime();
  float uptime() const;
  void set_uptime(float value);
  private:
  float _internal_uptime() const;
  void _internal_set_uptime(float value);
  public:

  // float idle_process_time = 2;
  void clear_idle_process_time();
  float idle_process_time() const;
  void set_idle_process_time(float value);
  private:
  float _internal_idle_process_time() const;
  void _internal_set_idle_process_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcUptimeMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float uptime_;
  float idle_process_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcDiskSpaceMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcDiskSpaceMetric) */ {
 public:
  inline BmcDiskSpaceMetric() : BmcDiskSpaceMetric(nullptr) {};
  virtual ~BmcDiskSpaceMetric();

  BmcDiskSpaceMetric(const BmcDiskSpaceMetric& from);
  BmcDiskSpaceMetric(BmcDiskSpaceMetric&& from) noexcept
    : BmcDiskSpaceMetric() {
    *this = ::std::move(from);
  }

  inline BmcDiskSpaceMetric& operator=(const BmcDiskSpaceMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcDiskSpaceMetric& operator=(BmcDiskSpaceMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcDiskSpaceMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcDiskSpaceMetric* internal_default_instance() {
    return reinterpret_cast<const BmcDiskSpaceMetric*>(
               &_BmcDiskSpaceMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BmcDiskSpaceMetric& a, BmcDiskSpaceMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcDiskSpaceMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcDiskSpaceMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcDiskSpaceMetric* New() const final {
    return CreateMaybeMessage<BmcDiskSpaceMetric>(nullptr);
  }

  BmcDiskSpaceMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcDiskSpaceMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcDiskSpaceMetric& from);
  void MergeFrom(const BmcDiskSpaceMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcDiskSpaceMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcDiskSpaceMetric";
  }
  protected:
  explicit BmcDiskSpaceMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRwfsKibAvailableFieldNumber = 1,
  };
  // int32 rwfs_kib_available = 1;
  void clear_rwfs_kib_available();
  ::PROTOBUF_NAMESPACE_ID::int32 rwfs_kib_available() const;
  void set_rwfs_kib_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rwfs_kib_available() const;
  void _internal_set_rwfs_kib_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcDiskSpaceMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 rwfs_kib_available_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcProcStatMetric_BmcProcStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat) */ {
 public:
  inline BmcProcStatMetric_BmcProcStat() : BmcProcStatMetric_BmcProcStat(nullptr) {};
  virtual ~BmcProcStatMetric_BmcProcStat();

  BmcProcStatMetric_BmcProcStat(const BmcProcStatMetric_BmcProcStat& from);
  BmcProcStatMetric_BmcProcStat(BmcProcStatMetric_BmcProcStat&& from) noexcept
    : BmcProcStatMetric_BmcProcStat() {
    *this = ::std::move(from);
  }

  inline BmcProcStatMetric_BmcProcStat& operator=(const BmcProcStatMetric_BmcProcStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcProcStatMetric_BmcProcStat& operator=(BmcProcStatMetric_BmcProcStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcProcStatMetric_BmcProcStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcProcStatMetric_BmcProcStat* internal_default_instance() {
    return reinterpret_cast<const BmcProcStatMetric_BmcProcStat*>(
               &_BmcProcStatMetric_BmcProcStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BmcProcStatMetric_BmcProcStat& a, BmcProcStatMetric_BmcProcStat& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcProcStatMetric_BmcProcStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcProcStatMetric_BmcProcStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcProcStatMetric_BmcProcStat* New() const final {
    return CreateMaybeMessage<BmcProcStatMetric_BmcProcStat>(nullptr);
  }

  BmcProcStatMetric_BmcProcStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcProcStatMetric_BmcProcStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcProcStatMetric_BmcProcStat& from);
  void MergeFrom(const BmcProcStatMetric_BmcProcStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcProcStatMetric_BmcProcStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat";
  }
  protected:
  explicit BmcProcStatMetric_BmcProcStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidxCmdlineFieldNumber = 1,
    kUtimeFieldNumber = 2,
    kStimeFieldNumber = 3,
  };
  // int32 sidx_cmdline = 1;
  void clear_sidx_cmdline();
  ::PROTOBUF_NAMESPACE_ID::int32 sidx_cmdline() const;
  void set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sidx_cmdline() const;
  void _internal_set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float utime = 2;
  void clear_utime();
  float utime() const;
  void set_utime(float value);
  private:
  float _internal_utime() const;
  void _internal_set_utime(float value);
  public:

  // float stime = 3;
  void clear_stime();
  float stime() const;
  void set_stime(float value);
  private:
  float _internal_stime() const;
  void _internal_set_stime(float value);
  public:

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sidx_cmdline_;
  float utime_;
  float stime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcProcStatMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcProcStatMetric) */ {
 public:
  inline BmcProcStatMetric() : BmcProcStatMetric(nullptr) {};
  virtual ~BmcProcStatMetric();

  BmcProcStatMetric(const BmcProcStatMetric& from);
  BmcProcStatMetric(BmcProcStatMetric&& from) noexcept
    : BmcProcStatMetric() {
    *this = ::std::move(from);
  }

  inline BmcProcStatMetric& operator=(const BmcProcStatMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcProcStatMetric& operator=(BmcProcStatMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcProcStatMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcProcStatMetric* internal_default_instance() {
    return reinterpret_cast<const BmcProcStatMetric*>(
               &_BmcProcStatMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BmcProcStatMetric& a, BmcProcStatMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcProcStatMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcProcStatMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcProcStatMetric* New() const final {
    return CreateMaybeMessage<BmcProcStatMetric>(nullptr);
  }

  BmcProcStatMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcProcStatMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcProcStatMetric& from);
  void MergeFrom(const BmcProcStatMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcProcStatMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcProcStatMetric";
  }
  protected:
  explicit BmcProcStatMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BmcProcStatMetric_BmcProcStat BmcProcStat;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 10,
  };
  // repeated .bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat stats = 10;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat >*
      mutable_stats();
  private:
  const ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat& _internal_stats(int index) const;
  ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* _internal_add_stats();
  public:
  const ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat& stats(int index) const;
  ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat >&
      stats() const;

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcProcStatMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcFdStatMetric_BmcFdStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat) */ {
 public:
  inline BmcFdStatMetric_BmcFdStat() : BmcFdStatMetric_BmcFdStat(nullptr) {};
  virtual ~BmcFdStatMetric_BmcFdStat();

  BmcFdStatMetric_BmcFdStat(const BmcFdStatMetric_BmcFdStat& from);
  BmcFdStatMetric_BmcFdStat(BmcFdStatMetric_BmcFdStat&& from) noexcept
    : BmcFdStatMetric_BmcFdStat() {
    *this = ::std::move(from);
  }

  inline BmcFdStatMetric_BmcFdStat& operator=(const BmcFdStatMetric_BmcFdStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcFdStatMetric_BmcFdStat& operator=(BmcFdStatMetric_BmcFdStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcFdStatMetric_BmcFdStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcFdStatMetric_BmcFdStat* internal_default_instance() {
    return reinterpret_cast<const BmcFdStatMetric_BmcFdStat*>(
               &_BmcFdStatMetric_BmcFdStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BmcFdStatMetric_BmcFdStat& a, BmcFdStatMetric_BmcFdStat& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcFdStatMetric_BmcFdStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcFdStatMetric_BmcFdStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcFdStatMetric_BmcFdStat* New() const final {
    return CreateMaybeMessage<BmcFdStatMetric_BmcFdStat>(nullptr);
  }

  BmcFdStatMetric_BmcFdStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcFdStatMetric_BmcFdStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcFdStatMetric_BmcFdStat& from);
  void MergeFrom(const BmcFdStatMetric_BmcFdStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcFdStatMetric_BmcFdStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat";
  }
  protected:
  explicit BmcFdStatMetric_BmcFdStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidxCmdlineFieldNumber = 1,
    kFdCountFieldNumber = 2,
  };
  // int32 sidx_cmdline = 1;
  void clear_sidx_cmdline();
  ::PROTOBUF_NAMESPACE_ID::int32 sidx_cmdline() const;
  void set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sidx_cmdline() const;
  void _internal_set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fd_count = 2;
  void clear_fd_count();
  ::PROTOBUF_NAMESPACE_ID::int32 fd_count() const;
  void set_fd_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd_count() const;
  void _internal_set_fd_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sidx_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcFdStatMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcFdStatMetric) */ {
 public:
  inline BmcFdStatMetric() : BmcFdStatMetric(nullptr) {};
  virtual ~BmcFdStatMetric();

  BmcFdStatMetric(const BmcFdStatMetric& from);
  BmcFdStatMetric(BmcFdStatMetric&& from) noexcept
    : BmcFdStatMetric() {
    *this = ::std::move(from);
  }

  inline BmcFdStatMetric& operator=(const BmcFdStatMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcFdStatMetric& operator=(BmcFdStatMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcFdStatMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcFdStatMetric* internal_default_instance() {
    return reinterpret_cast<const BmcFdStatMetric*>(
               &_BmcFdStatMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BmcFdStatMetric& a, BmcFdStatMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcFdStatMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcFdStatMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcFdStatMetric* New() const final {
    return CreateMaybeMessage<BmcFdStatMetric>(nullptr);
  }

  BmcFdStatMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcFdStatMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcFdStatMetric& from);
  void MergeFrom(const BmcFdStatMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcFdStatMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcFdStatMetric";
  }
  protected:
  explicit BmcFdStatMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BmcFdStatMetric_BmcFdStat BmcFdStat;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 10,
  };
  // repeated .bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat stats = 10;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat >*
      mutable_stats();
  private:
  const ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat& _internal_stats(int index) const;
  ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* _internal_add_stats();
  public:
  const ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat& stats(int index) const;
  ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat >&
      stats() const;

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcFdStatMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcStringTable_StringEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcStringTable.StringEntry) */ {
 public:
  inline BmcStringTable_StringEntry() : BmcStringTable_StringEntry(nullptr) {};
  virtual ~BmcStringTable_StringEntry();

  BmcStringTable_StringEntry(const BmcStringTable_StringEntry& from);
  BmcStringTable_StringEntry(BmcStringTable_StringEntry&& from) noexcept
    : BmcStringTable_StringEntry() {
    *this = ::std::move(from);
  }

  inline BmcStringTable_StringEntry& operator=(const BmcStringTable_StringEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcStringTable_StringEntry& operator=(BmcStringTable_StringEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcStringTable_StringEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcStringTable_StringEntry* internal_default_instance() {
    return reinterpret_cast<const BmcStringTable_StringEntry*>(
               &_BmcStringTable_StringEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BmcStringTable_StringEntry& a, BmcStringTable_StringEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcStringTable_StringEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcStringTable_StringEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcStringTable_StringEntry* New() const final {
    return CreateMaybeMessage<BmcStringTable_StringEntry>(nullptr);
  }

  BmcStringTable_StringEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcStringTable_StringEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcStringTable_StringEntry& from);
  void MergeFrom(const BmcStringTable_StringEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcStringTable_StringEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcStringTable.StringEntry";
  }
  protected:
  explicit BmcStringTable_StringEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcStringTable.StringEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcStringTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcStringTable) */ {
 public:
  inline BmcStringTable() : BmcStringTable(nullptr) {};
  virtual ~BmcStringTable();

  BmcStringTable(const BmcStringTable& from);
  BmcStringTable(BmcStringTable&& from) noexcept
    : BmcStringTable() {
    *this = ::std::move(from);
  }

  inline BmcStringTable& operator=(const BmcStringTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcStringTable& operator=(BmcStringTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcStringTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcStringTable* internal_default_instance() {
    return reinterpret_cast<const BmcStringTable*>(
               &_BmcStringTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BmcStringTable& a, BmcStringTable& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcStringTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcStringTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcStringTable* New() const final {
    return CreateMaybeMessage<BmcStringTable>(nullptr);
  }

  BmcStringTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcStringTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcStringTable& from);
  void MergeFrom(const BmcStringTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcStringTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcStringTable";
  }
  protected:
  explicit BmcStringTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BmcStringTable_StringEntry StringEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 10,
  };
  // repeated .bmcmetrics.metricproto.BmcStringTable.StringEntry entries = 10;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::bmcmetrics::metricproto::BmcStringTable_StringEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcStringTable_StringEntry >*
      mutable_entries();
  private:
  const ::bmcmetrics::metricproto::BmcStringTable_StringEntry& _internal_entries(int index) const;
  ::bmcmetrics::metricproto::BmcStringTable_StringEntry* _internal_add_entries();
  public:
  const ::bmcmetrics::metricproto::BmcStringTable_StringEntry& entries(int index) const;
  ::bmcmetrics::metricproto::BmcStringTable_StringEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcStringTable_StringEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcStringTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcStringTable_StringEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// -------------------------------------------------------------------

class BmcMetricSnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmcmetrics.metricproto.BmcMetricSnapshot) */ {
 public:
  inline BmcMetricSnapshot() : BmcMetricSnapshot(nullptr) {};
  virtual ~BmcMetricSnapshot();

  BmcMetricSnapshot(const BmcMetricSnapshot& from);
  BmcMetricSnapshot(BmcMetricSnapshot&& from) noexcept
    : BmcMetricSnapshot() {
    *this = ::std::move(from);
  }

  inline BmcMetricSnapshot& operator=(const BmcMetricSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmcMetricSnapshot& operator=(BmcMetricSnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmcMetricSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmcMetricSnapshot* internal_default_instance() {
    return reinterpret_cast<const BmcMetricSnapshot*>(
               &_BmcMetricSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BmcMetricSnapshot& a, BmcMetricSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(BmcMetricSnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BmcMetricSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmcMetricSnapshot* New() const final {
    return CreateMaybeMessage<BmcMetricSnapshot>(nullptr);
  }

  BmcMetricSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmcMetricSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmcMetricSnapshot& from);
  void MergeFrom(const BmcMetricSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmcMetricSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmcmetrics.metricproto.BmcMetricSnapshot";
  }
  protected:
  explicit BmcMetricSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metricblob_2eproto);
    return ::descriptor_table_metricblob_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringTableFieldNumber = 1,
    kMemoryMetricFieldNumber = 2,
    kUptimeMetricFieldNumber = 3,
    kStorageSpaceMetricFieldNumber = 4,
    kProcstatMetricFieldNumber = 5,
    kFdstatMetricFieldNumber = 6,
  };
  // .bmcmetrics.metricproto.BmcStringTable string_table = 1;
  bool has_string_table() const;
  private:
  bool _internal_has_string_table() const;
  public:
  void clear_string_table();
  const ::bmcmetrics::metricproto::BmcStringTable& string_table() const;
  ::bmcmetrics::metricproto::BmcStringTable* release_string_table();
  ::bmcmetrics::metricproto::BmcStringTable* mutable_string_table();
  void set_allocated_string_table(::bmcmetrics::metricproto::BmcStringTable* string_table);
  private:
  const ::bmcmetrics::metricproto::BmcStringTable& _internal_string_table() const;
  ::bmcmetrics::metricproto::BmcStringTable* _internal_mutable_string_table();
  public:
  void unsafe_arena_set_allocated_string_table(
      ::bmcmetrics::metricproto::BmcStringTable* string_table);
  ::bmcmetrics::metricproto::BmcStringTable* unsafe_arena_release_string_table();

  // .bmcmetrics.metricproto.BmcMemoryMetric memory_metric = 2;
  bool has_memory_metric() const;
  private:
  bool _internal_has_memory_metric() const;
  public:
  void clear_memory_metric();
  const ::bmcmetrics::metricproto::BmcMemoryMetric& memory_metric() const;
  ::bmcmetrics::metricproto::BmcMemoryMetric* release_memory_metric();
  ::bmcmetrics::metricproto::BmcMemoryMetric* mutable_memory_metric();
  void set_allocated_memory_metric(::bmcmetrics::metricproto::BmcMemoryMetric* memory_metric);
  private:
  const ::bmcmetrics::metricproto::BmcMemoryMetric& _internal_memory_metric() const;
  ::bmcmetrics::metricproto::BmcMemoryMetric* _internal_mutable_memory_metric();
  public:
  void unsafe_arena_set_allocated_memory_metric(
      ::bmcmetrics::metricproto::BmcMemoryMetric* memory_metric);
  ::bmcmetrics::metricproto::BmcMemoryMetric* unsafe_arena_release_memory_metric();

  // .bmcmetrics.metricproto.BmcUptimeMetric uptime_metric = 3;
  bool has_uptime_metric() const;
  private:
  bool _internal_has_uptime_metric() const;
  public:
  void clear_uptime_metric();
  const ::bmcmetrics::metricproto::BmcUptimeMetric& uptime_metric() const;
  ::bmcmetrics::metricproto::BmcUptimeMetric* release_uptime_metric();
  ::bmcmetrics::metricproto::BmcUptimeMetric* mutable_uptime_metric();
  void set_allocated_uptime_metric(::bmcmetrics::metricproto::BmcUptimeMetric* uptime_metric);
  private:
  const ::bmcmetrics::metricproto::BmcUptimeMetric& _internal_uptime_metric() const;
  ::bmcmetrics::metricproto::BmcUptimeMetric* _internal_mutable_uptime_metric();
  public:
  void unsafe_arena_set_allocated_uptime_metric(
      ::bmcmetrics::metricproto::BmcUptimeMetric* uptime_metric);
  ::bmcmetrics::metricproto::BmcUptimeMetric* unsafe_arena_release_uptime_metric();

  // .bmcmetrics.metricproto.BmcDiskSpaceMetric storage_space_metric = 4;
  bool has_storage_space_metric() const;
  private:
  bool _internal_has_storage_space_metric() const;
  public:
  void clear_storage_space_metric();
  const ::bmcmetrics::metricproto::BmcDiskSpaceMetric& storage_space_metric() const;
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* release_storage_space_metric();
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* mutable_storage_space_metric();
  void set_allocated_storage_space_metric(::bmcmetrics::metricproto::BmcDiskSpaceMetric* storage_space_metric);
  private:
  const ::bmcmetrics::metricproto::BmcDiskSpaceMetric& _internal_storage_space_metric() const;
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* _internal_mutable_storage_space_metric();
  public:
  void unsafe_arena_set_allocated_storage_space_metric(
      ::bmcmetrics::metricproto::BmcDiskSpaceMetric* storage_space_metric);
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* unsafe_arena_release_storage_space_metric();

  // .bmcmetrics.metricproto.BmcProcStatMetric procstat_metric = 5;
  bool has_procstat_metric() const;
  private:
  bool _internal_has_procstat_metric() const;
  public:
  void clear_procstat_metric();
  const ::bmcmetrics::metricproto::BmcProcStatMetric& procstat_metric() const;
  ::bmcmetrics::metricproto::BmcProcStatMetric* release_procstat_metric();
  ::bmcmetrics::metricproto::BmcProcStatMetric* mutable_procstat_metric();
  void set_allocated_procstat_metric(::bmcmetrics::metricproto::BmcProcStatMetric* procstat_metric);
  private:
  const ::bmcmetrics::metricproto::BmcProcStatMetric& _internal_procstat_metric() const;
  ::bmcmetrics::metricproto::BmcProcStatMetric* _internal_mutable_procstat_metric();
  public:
  void unsafe_arena_set_allocated_procstat_metric(
      ::bmcmetrics::metricproto::BmcProcStatMetric* procstat_metric);
  ::bmcmetrics::metricproto::BmcProcStatMetric* unsafe_arena_release_procstat_metric();

  // .bmcmetrics.metricproto.BmcFdStatMetric fdstat_metric = 6;
  bool has_fdstat_metric() const;
  private:
  bool _internal_has_fdstat_metric() const;
  public:
  void clear_fdstat_metric();
  const ::bmcmetrics::metricproto::BmcFdStatMetric& fdstat_metric() const;
  ::bmcmetrics::metricproto::BmcFdStatMetric* release_fdstat_metric();
  ::bmcmetrics::metricproto::BmcFdStatMetric* mutable_fdstat_metric();
  void set_allocated_fdstat_metric(::bmcmetrics::metricproto::BmcFdStatMetric* fdstat_metric);
  private:
  const ::bmcmetrics::metricproto::BmcFdStatMetric& _internal_fdstat_metric() const;
  ::bmcmetrics::metricproto::BmcFdStatMetric* _internal_mutable_fdstat_metric();
  public:
  void unsafe_arena_set_allocated_fdstat_metric(
      ::bmcmetrics::metricproto::BmcFdStatMetric* fdstat_metric);
  ::bmcmetrics::metricproto::BmcFdStatMetric* unsafe_arena_release_fdstat_metric();

  // @@protoc_insertion_point(class_scope:bmcmetrics.metricproto.BmcMetricSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bmcmetrics::metricproto::BmcStringTable* string_table_;
  ::bmcmetrics::metricproto::BmcMemoryMetric* memory_metric_;
  ::bmcmetrics::metricproto::BmcUptimeMetric* uptime_metric_;
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* storage_space_metric_;
  ::bmcmetrics::metricproto::BmcProcStatMetric* procstat_metric_;
  ::bmcmetrics::metricproto::BmcFdStatMetric* fdstat_metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metricblob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BmcMemoryMetric

// int32 mem_available = 1;
inline void BmcMemoryMetric::clear_mem_available() {
  mem_available_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcMemoryMetric::_internal_mem_available() const {
  return mem_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcMemoryMetric::mem_available() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMemoryMetric.mem_available)
  return _internal_mem_available();
}
inline void BmcMemoryMetric::_internal_set_mem_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mem_available_ = value;
}
inline void BmcMemoryMetric::set_mem_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mem_available(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcMemoryMetric.mem_available)
}

// int32 slab = 2;
inline void BmcMemoryMetric::clear_slab() {
  slab_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcMemoryMetric::_internal_slab() const {
  return slab_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcMemoryMetric::slab() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMemoryMetric.slab)
  return _internal_slab();
}
inline void BmcMemoryMetric::_internal_set_slab(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slab_ = value;
}
inline void BmcMemoryMetric::set_slab(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slab(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcMemoryMetric.slab)
}

// int32 kernel_stack = 3;
inline void BmcMemoryMetric::clear_kernel_stack() {
  kernel_stack_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcMemoryMetric::_internal_kernel_stack() const {
  return kernel_stack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcMemoryMetric::kernel_stack() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMemoryMetric.kernel_stack)
  return _internal_kernel_stack();
}
inline void BmcMemoryMetric::_internal_set_kernel_stack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kernel_stack_ = value;
}
inline void BmcMemoryMetric::set_kernel_stack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_stack(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcMemoryMetric.kernel_stack)
}

// -------------------------------------------------------------------

// BmcUptimeMetric

// float uptime = 1;
inline void BmcUptimeMetric::clear_uptime() {
  uptime_ = 0;
}
inline float BmcUptimeMetric::_internal_uptime() const {
  return uptime_;
}
inline float BmcUptimeMetric::uptime() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcUptimeMetric.uptime)
  return _internal_uptime();
}
inline void BmcUptimeMetric::_internal_set_uptime(float value) {
  
  uptime_ = value;
}
inline void BmcUptimeMetric::set_uptime(float value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcUptimeMetric.uptime)
}

// float idle_process_time = 2;
inline void BmcUptimeMetric::clear_idle_process_time() {
  idle_process_time_ = 0;
}
inline float BmcUptimeMetric::_internal_idle_process_time() const {
  return idle_process_time_;
}
inline float BmcUptimeMetric::idle_process_time() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcUptimeMetric.idle_process_time)
  return _internal_idle_process_time();
}
inline void BmcUptimeMetric::_internal_set_idle_process_time(float value) {
  
  idle_process_time_ = value;
}
inline void BmcUptimeMetric::set_idle_process_time(float value) {
  _internal_set_idle_process_time(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcUptimeMetric.idle_process_time)
}

// -------------------------------------------------------------------

// BmcDiskSpaceMetric

// int32 rwfs_kib_available = 1;
inline void BmcDiskSpaceMetric::clear_rwfs_kib_available() {
  rwfs_kib_available_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcDiskSpaceMetric::_internal_rwfs_kib_available() const {
  return rwfs_kib_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcDiskSpaceMetric::rwfs_kib_available() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcDiskSpaceMetric.rwfs_kib_available)
  return _internal_rwfs_kib_available();
}
inline void BmcDiskSpaceMetric::_internal_set_rwfs_kib_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rwfs_kib_available_ = value;
}
inline void BmcDiskSpaceMetric::set_rwfs_kib_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rwfs_kib_available(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcDiskSpaceMetric.rwfs_kib_available)
}

// -------------------------------------------------------------------

// BmcProcStatMetric_BmcProcStat

// int32 sidx_cmdline = 1;
inline void BmcProcStatMetric_BmcProcStat::clear_sidx_cmdline() {
  sidx_cmdline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcProcStatMetric_BmcProcStat::_internal_sidx_cmdline() const {
  return sidx_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcProcStatMetric_BmcProcStat::sidx_cmdline() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat.sidx_cmdline)
  return _internal_sidx_cmdline();
}
inline void BmcProcStatMetric_BmcProcStat::_internal_set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sidx_cmdline_ = value;
}
inline void BmcProcStatMetric_BmcProcStat::set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sidx_cmdline(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat.sidx_cmdline)
}

// float utime = 2;
inline void BmcProcStatMetric_BmcProcStat::clear_utime() {
  utime_ = 0;
}
inline float BmcProcStatMetric_BmcProcStat::_internal_utime() const {
  return utime_;
}
inline float BmcProcStatMetric_BmcProcStat::utime() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat.utime)
  return _internal_utime();
}
inline void BmcProcStatMetric_BmcProcStat::_internal_set_utime(float value) {
  
  utime_ = value;
}
inline void BmcProcStatMetric_BmcProcStat::set_utime(float value) {
  _internal_set_utime(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat.utime)
}

// float stime = 3;
inline void BmcProcStatMetric_BmcProcStat::clear_stime() {
  stime_ = 0;
}
inline float BmcProcStatMetric_BmcProcStat::_internal_stime() const {
  return stime_;
}
inline float BmcProcStatMetric_BmcProcStat::stime() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat.stime)
  return _internal_stime();
}
inline void BmcProcStatMetric_BmcProcStat::_internal_set_stime(float value) {
  
  stime_ = value;
}
inline void BmcProcStatMetric_BmcProcStat::set_stime(float value) {
  _internal_set_stime(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat.stime)
}

// -------------------------------------------------------------------

// BmcProcStatMetric

// repeated .bmcmetrics.metricproto.BmcProcStatMetric.BmcProcStat stats = 10;
inline int BmcProcStatMetric::_internal_stats_size() const {
  return stats_.size();
}
inline int BmcProcStatMetric::stats_size() const {
  return _internal_stats_size();
}
inline void BmcProcStatMetric::clear_stats() {
  stats_.Clear();
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* BmcProcStatMetric::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcProcStatMetric.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat >*
BmcProcStatMetric::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:bmcmetrics.metricproto.BmcProcStatMetric.stats)
  return &stats_;
}
inline const ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat& BmcProcStatMetric::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat& BmcProcStatMetric::stats(int index) const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcProcStatMetric.stats)
  return _internal_stats(index);
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* BmcProcStatMetric::_internal_add_stats() {
  return stats_.Add();
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat* BmcProcStatMetric::add_stats() {
  // @@protoc_insertion_point(field_add:bmcmetrics.metricproto.BmcProcStatMetric.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcProcStatMetric_BmcProcStat >&
BmcProcStatMetric::stats() const {
  // @@protoc_insertion_point(field_list:bmcmetrics.metricproto.BmcProcStatMetric.stats)
  return stats_;
}

// -------------------------------------------------------------------

// BmcFdStatMetric_BmcFdStat

// int32 sidx_cmdline = 1;
inline void BmcFdStatMetric_BmcFdStat::clear_sidx_cmdline() {
  sidx_cmdline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcFdStatMetric_BmcFdStat::_internal_sidx_cmdline() const {
  return sidx_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcFdStatMetric_BmcFdStat::sidx_cmdline() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat.sidx_cmdline)
  return _internal_sidx_cmdline();
}
inline void BmcFdStatMetric_BmcFdStat::_internal_set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sidx_cmdline_ = value;
}
inline void BmcFdStatMetric_BmcFdStat::set_sidx_cmdline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sidx_cmdline(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat.sidx_cmdline)
}

// int32 fd_count = 2;
inline void BmcFdStatMetric_BmcFdStat::clear_fd_count() {
  fd_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcFdStatMetric_BmcFdStat::_internal_fd_count() const {
  return fd_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmcFdStatMetric_BmcFdStat::fd_count() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat.fd_count)
  return _internal_fd_count();
}
inline void BmcFdStatMetric_BmcFdStat::_internal_set_fd_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_count_ = value;
}
inline void BmcFdStatMetric_BmcFdStat::set_fd_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd_count(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat.fd_count)
}

// -------------------------------------------------------------------

// BmcFdStatMetric

// repeated .bmcmetrics.metricproto.BmcFdStatMetric.BmcFdStat stats = 10;
inline int BmcFdStatMetric::_internal_stats_size() const {
  return stats_.size();
}
inline int BmcFdStatMetric::stats_size() const {
  return _internal_stats_size();
}
inline void BmcFdStatMetric::clear_stats() {
  stats_.Clear();
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* BmcFdStatMetric::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcFdStatMetric.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat >*
BmcFdStatMetric::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:bmcmetrics.metricproto.BmcFdStatMetric.stats)
  return &stats_;
}
inline const ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat& BmcFdStatMetric::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat& BmcFdStatMetric::stats(int index) const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcFdStatMetric.stats)
  return _internal_stats(index);
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* BmcFdStatMetric::_internal_add_stats() {
  return stats_.Add();
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat* BmcFdStatMetric::add_stats() {
  // @@protoc_insertion_point(field_add:bmcmetrics.metricproto.BmcFdStatMetric.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcFdStatMetric_BmcFdStat >&
BmcFdStatMetric::stats() const {
  // @@protoc_insertion_point(field_list:bmcmetrics.metricproto.BmcFdStatMetric.stats)
  return stats_;
}

// -------------------------------------------------------------------

// BmcStringTable_StringEntry

// string value = 1;
inline void BmcStringTable_StringEntry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BmcStringTable_StringEntry::value() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
  return _internal_value();
}
inline void BmcStringTable_StringEntry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
}
inline std::string* BmcStringTable_StringEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
  return _internal_mutable_value();
}
inline const std::string& BmcStringTable_StringEntry::_internal_value() const {
  return value_.Get();
}
inline void BmcStringTable_StringEntry::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BmcStringTable_StringEntry::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
}
inline void BmcStringTable_StringEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
}
inline void BmcStringTable_StringEntry::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
}
inline std::string* BmcStringTable_StringEntry::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BmcStringTable_StringEntry::release_value() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BmcStringTable_StringEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcStringTable.StringEntry.value)
}

// -------------------------------------------------------------------

// BmcStringTable

// repeated .bmcmetrics.metricproto.BmcStringTable.StringEntry entries = 10;
inline int BmcStringTable::_internal_entries_size() const {
  return entries_.size();
}
inline int BmcStringTable::entries_size() const {
  return _internal_entries_size();
}
inline void BmcStringTable::clear_entries() {
  entries_.Clear();
}
inline ::bmcmetrics::metricproto::BmcStringTable_StringEntry* BmcStringTable::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcStringTable.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcStringTable_StringEntry >*
BmcStringTable::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:bmcmetrics.metricproto.BmcStringTable.entries)
  return &entries_;
}
inline const ::bmcmetrics::metricproto::BmcStringTable_StringEntry& BmcStringTable::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::bmcmetrics::metricproto::BmcStringTable_StringEntry& BmcStringTable::entries(int index) const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcStringTable.entries)
  return _internal_entries(index);
}
inline ::bmcmetrics::metricproto::BmcStringTable_StringEntry* BmcStringTable::_internal_add_entries() {
  return entries_.Add();
}
inline ::bmcmetrics::metricproto::BmcStringTable_StringEntry* BmcStringTable::add_entries() {
  // @@protoc_insertion_point(field_add:bmcmetrics.metricproto.BmcStringTable.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmcmetrics::metricproto::BmcStringTable_StringEntry >&
BmcStringTable::entries() const {
  // @@protoc_insertion_point(field_list:bmcmetrics.metricproto.BmcStringTable.entries)
  return entries_;
}

// -------------------------------------------------------------------

// BmcMetricSnapshot

// .bmcmetrics.metricproto.BmcStringTable string_table = 1;
inline bool BmcMetricSnapshot::_internal_has_string_table() const {
  return this != internal_default_instance() && string_table_ != nullptr;
}
inline bool BmcMetricSnapshot::has_string_table() const {
  return _internal_has_string_table();
}
inline void BmcMetricSnapshot::clear_string_table() {
  if (GetArena() == nullptr && string_table_ != nullptr) {
    delete string_table_;
  }
  string_table_ = nullptr;
}
inline const ::bmcmetrics::metricproto::BmcStringTable& BmcMetricSnapshot::_internal_string_table() const {
  const ::bmcmetrics::metricproto::BmcStringTable* p = string_table_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmcmetrics::metricproto::BmcStringTable*>(
      &::bmcmetrics::metricproto::_BmcStringTable_default_instance_);
}
inline const ::bmcmetrics::metricproto::BmcStringTable& BmcMetricSnapshot::string_table() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMetricSnapshot.string_table)
  return _internal_string_table();
}
inline void BmcMetricSnapshot::unsafe_arena_set_allocated_string_table(
    ::bmcmetrics::metricproto::BmcStringTable* string_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_table_);
  }
  string_table_ = string_table;
  if (string_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.string_table)
}
inline ::bmcmetrics::metricproto::BmcStringTable* BmcMetricSnapshot::release_string_table() {
  
  ::bmcmetrics::metricproto::BmcStringTable* temp = string_table_;
  string_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bmcmetrics::metricproto::BmcStringTable* BmcMetricSnapshot::unsafe_arena_release_string_table() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcMetricSnapshot.string_table)
  
  ::bmcmetrics::metricproto::BmcStringTable* temp = string_table_;
  string_table_ = nullptr;
  return temp;
}
inline ::bmcmetrics::metricproto::BmcStringTable* BmcMetricSnapshot::_internal_mutable_string_table() {
  
  if (string_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmcmetrics::metricproto::BmcStringTable>(GetArena());
    string_table_ = p;
  }
  return string_table_;
}
inline ::bmcmetrics::metricproto::BmcStringTable* BmcMetricSnapshot::mutable_string_table() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcMetricSnapshot.string_table)
  return _internal_mutable_string_table();
}
inline void BmcMetricSnapshot::set_allocated_string_table(::bmcmetrics::metricproto::BmcStringTable* string_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete string_table_;
  }
  if (string_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string_table);
    if (message_arena != submessage_arena) {
      string_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_table, submessage_arena);
    }
    
  } else {
    
  }
  string_table_ = string_table;
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.string_table)
}

// .bmcmetrics.metricproto.BmcMemoryMetric memory_metric = 2;
inline bool BmcMetricSnapshot::_internal_has_memory_metric() const {
  return this != internal_default_instance() && memory_metric_ != nullptr;
}
inline bool BmcMetricSnapshot::has_memory_metric() const {
  return _internal_has_memory_metric();
}
inline void BmcMetricSnapshot::clear_memory_metric() {
  if (GetArena() == nullptr && memory_metric_ != nullptr) {
    delete memory_metric_;
  }
  memory_metric_ = nullptr;
}
inline const ::bmcmetrics::metricproto::BmcMemoryMetric& BmcMetricSnapshot::_internal_memory_metric() const {
  const ::bmcmetrics::metricproto::BmcMemoryMetric* p = memory_metric_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmcmetrics::metricproto::BmcMemoryMetric*>(
      &::bmcmetrics::metricproto::_BmcMemoryMetric_default_instance_);
}
inline const ::bmcmetrics::metricproto::BmcMemoryMetric& BmcMetricSnapshot::memory_metric() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMetricSnapshot.memory_metric)
  return _internal_memory_metric();
}
inline void BmcMetricSnapshot::unsafe_arena_set_allocated_memory_metric(
    ::bmcmetrics::metricproto::BmcMemoryMetric* memory_metric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_metric_);
  }
  memory_metric_ = memory_metric;
  if (memory_metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.memory_metric)
}
inline ::bmcmetrics::metricproto::BmcMemoryMetric* BmcMetricSnapshot::release_memory_metric() {
  
  ::bmcmetrics::metricproto::BmcMemoryMetric* temp = memory_metric_;
  memory_metric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bmcmetrics::metricproto::BmcMemoryMetric* BmcMetricSnapshot::unsafe_arena_release_memory_metric() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcMetricSnapshot.memory_metric)
  
  ::bmcmetrics::metricproto::BmcMemoryMetric* temp = memory_metric_;
  memory_metric_ = nullptr;
  return temp;
}
inline ::bmcmetrics::metricproto::BmcMemoryMetric* BmcMetricSnapshot::_internal_mutable_memory_metric() {
  
  if (memory_metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmcmetrics::metricproto::BmcMemoryMetric>(GetArena());
    memory_metric_ = p;
  }
  return memory_metric_;
}
inline ::bmcmetrics::metricproto::BmcMemoryMetric* BmcMetricSnapshot::mutable_memory_metric() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcMetricSnapshot.memory_metric)
  return _internal_mutable_memory_metric();
}
inline void BmcMetricSnapshot::set_allocated_memory_metric(::bmcmetrics::metricproto::BmcMemoryMetric* memory_metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_metric_;
  }
  if (memory_metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory_metric);
    if (message_arena != submessage_arena) {
      memory_metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_metric, submessage_arena);
    }
    
  } else {
    
  }
  memory_metric_ = memory_metric;
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.memory_metric)
}

// .bmcmetrics.metricproto.BmcUptimeMetric uptime_metric = 3;
inline bool BmcMetricSnapshot::_internal_has_uptime_metric() const {
  return this != internal_default_instance() && uptime_metric_ != nullptr;
}
inline bool BmcMetricSnapshot::has_uptime_metric() const {
  return _internal_has_uptime_metric();
}
inline void BmcMetricSnapshot::clear_uptime_metric() {
  if (GetArena() == nullptr && uptime_metric_ != nullptr) {
    delete uptime_metric_;
  }
  uptime_metric_ = nullptr;
}
inline const ::bmcmetrics::metricproto::BmcUptimeMetric& BmcMetricSnapshot::_internal_uptime_metric() const {
  const ::bmcmetrics::metricproto::BmcUptimeMetric* p = uptime_metric_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmcmetrics::metricproto::BmcUptimeMetric*>(
      &::bmcmetrics::metricproto::_BmcUptimeMetric_default_instance_);
}
inline const ::bmcmetrics::metricproto::BmcUptimeMetric& BmcMetricSnapshot::uptime_metric() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMetricSnapshot.uptime_metric)
  return _internal_uptime_metric();
}
inline void BmcMetricSnapshot::unsafe_arena_set_allocated_uptime_metric(
    ::bmcmetrics::metricproto::BmcUptimeMetric* uptime_metric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_metric_);
  }
  uptime_metric_ = uptime_metric;
  if (uptime_metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.uptime_metric)
}
inline ::bmcmetrics::metricproto::BmcUptimeMetric* BmcMetricSnapshot::release_uptime_metric() {
  
  ::bmcmetrics::metricproto::BmcUptimeMetric* temp = uptime_metric_;
  uptime_metric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bmcmetrics::metricproto::BmcUptimeMetric* BmcMetricSnapshot::unsafe_arena_release_uptime_metric() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcMetricSnapshot.uptime_metric)
  
  ::bmcmetrics::metricproto::BmcUptimeMetric* temp = uptime_metric_;
  uptime_metric_ = nullptr;
  return temp;
}
inline ::bmcmetrics::metricproto::BmcUptimeMetric* BmcMetricSnapshot::_internal_mutable_uptime_metric() {
  
  if (uptime_metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmcmetrics::metricproto::BmcUptimeMetric>(GetArena());
    uptime_metric_ = p;
  }
  return uptime_metric_;
}
inline ::bmcmetrics::metricproto::BmcUptimeMetric* BmcMetricSnapshot::mutable_uptime_metric() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcMetricSnapshot.uptime_metric)
  return _internal_mutable_uptime_metric();
}
inline void BmcMetricSnapshot::set_allocated_uptime_metric(::bmcmetrics::metricproto::BmcUptimeMetric* uptime_metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uptime_metric_;
  }
  if (uptime_metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uptime_metric);
    if (message_arena != submessage_arena) {
      uptime_metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime_metric, submessage_arena);
    }
    
  } else {
    
  }
  uptime_metric_ = uptime_metric;
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.uptime_metric)
}

// .bmcmetrics.metricproto.BmcDiskSpaceMetric storage_space_metric = 4;
inline bool BmcMetricSnapshot::_internal_has_storage_space_metric() const {
  return this != internal_default_instance() && storage_space_metric_ != nullptr;
}
inline bool BmcMetricSnapshot::has_storage_space_metric() const {
  return _internal_has_storage_space_metric();
}
inline void BmcMetricSnapshot::clear_storage_space_metric() {
  if (GetArena() == nullptr && storage_space_metric_ != nullptr) {
    delete storage_space_metric_;
  }
  storage_space_metric_ = nullptr;
}
inline const ::bmcmetrics::metricproto::BmcDiskSpaceMetric& BmcMetricSnapshot::_internal_storage_space_metric() const {
  const ::bmcmetrics::metricproto::BmcDiskSpaceMetric* p = storage_space_metric_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmcmetrics::metricproto::BmcDiskSpaceMetric*>(
      &::bmcmetrics::metricproto::_BmcDiskSpaceMetric_default_instance_);
}
inline const ::bmcmetrics::metricproto::BmcDiskSpaceMetric& BmcMetricSnapshot::storage_space_metric() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMetricSnapshot.storage_space_metric)
  return _internal_storage_space_metric();
}
inline void BmcMetricSnapshot::unsafe_arena_set_allocated_storage_space_metric(
    ::bmcmetrics::metricproto::BmcDiskSpaceMetric* storage_space_metric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_space_metric_);
  }
  storage_space_metric_ = storage_space_metric;
  if (storage_space_metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.storage_space_metric)
}
inline ::bmcmetrics::metricproto::BmcDiskSpaceMetric* BmcMetricSnapshot::release_storage_space_metric() {
  
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* temp = storage_space_metric_;
  storage_space_metric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bmcmetrics::metricproto::BmcDiskSpaceMetric* BmcMetricSnapshot::unsafe_arena_release_storage_space_metric() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcMetricSnapshot.storage_space_metric)
  
  ::bmcmetrics::metricproto::BmcDiskSpaceMetric* temp = storage_space_metric_;
  storage_space_metric_ = nullptr;
  return temp;
}
inline ::bmcmetrics::metricproto::BmcDiskSpaceMetric* BmcMetricSnapshot::_internal_mutable_storage_space_metric() {
  
  if (storage_space_metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmcmetrics::metricproto::BmcDiskSpaceMetric>(GetArena());
    storage_space_metric_ = p;
  }
  return storage_space_metric_;
}
inline ::bmcmetrics::metricproto::BmcDiskSpaceMetric* BmcMetricSnapshot::mutable_storage_space_metric() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcMetricSnapshot.storage_space_metric)
  return _internal_mutable_storage_space_metric();
}
inline void BmcMetricSnapshot::set_allocated_storage_space_metric(::bmcmetrics::metricproto::BmcDiskSpaceMetric* storage_space_metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete storage_space_metric_;
  }
  if (storage_space_metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_space_metric);
    if (message_arena != submessage_arena) {
      storage_space_metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_space_metric, submessage_arena);
    }
    
  } else {
    
  }
  storage_space_metric_ = storage_space_metric;
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.storage_space_metric)
}

// .bmcmetrics.metricproto.BmcProcStatMetric procstat_metric = 5;
inline bool BmcMetricSnapshot::_internal_has_procstat_metric() const {
  return this != internal_default_instance() && procstat_metric_ != nullptr;
}
inline bool BmcMetricSnapshot::has_procstat_metric() const {
  return _internal_has_procstat_metric();
}
inline void BmcMetricSnapshot::clear_procstat_metric() {
  if (GetArena() == nullptr && procstat_metric_ != nullptr) {
    delete procstat_metric_;
  }
  procstat_metric_ = nullptr;
}
inline const ::bmcmetrics::metricproto::BmcProcStatMetric& BmcMetricSnapshot::_internal_procstat_metric() const {
  const ::bmcmetrics::metricproto::BmcProcStatMetric* p = procstat_metric_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmcmetrics::metricproto::BmcProcStatMetric*>(
      &::bmcmetrics::metricproto::_BmcProcStatMetric_default_instance_);
}
inline const ::bmcmetrics::metricproto::BmcProcStatMetric& BmcMetricSnapshot::procstat_metric() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMetricSnapshot.procstat_metric)
  return _internal_procstat_metric();
}
inline void BmcMetricSnapshot::unsafe_arena_set_allocated_procstat_metric(
    ::bmcmetrics::metricproto::BmcProcStatMetric* procstat_metric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(procstat_metric_);
  }
  procstat_metric_ = procstat_metric;
  if (procstat_metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.procstat_metric)
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric* BmcMetricSnapshot::release_procstat_metric() {
  
  ::bmcmetrics::metricproto::BmcProcStatMetric* temp = procstat_metric_;
  procstat_metric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric* BmcMetricSnapshot::unsafe_arena_release_procstat_metric() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcMetricSnapshot.procstat_metric)
  
  ::bmcmetrics::metricproto::BmcProcStatMetric* temp = procstat_metric_;
  procstat_metric_ = nullptr;
  return temp;
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric* BmcMetricSnapshot::_internal_mutable_procstat_metric() {
  
  if (procstat_metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmcmetrics::metricproto::BmcProcStatMetric>(GetArena());
    procstat_metric_ = p;
  }
  return procstat_metric_;
}
inline ::bmcmetrics::metricproto::BmcProcStatMetric* BmcMetricSnapshot::mutable_procstat_metric() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcMetricSnapshot.procstat_metric)
  return _internal_mutable_procstat_metric();
}
inline void BmcMetricSnapshot::set_allocated_procstat_metric(::bmcmetrics::metricproto::BmcProcStatMetric* procstat_metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete procstat_metric_;
  }
  if (procstat_metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(procstat_metric);
    if (message_arena != submessage_arena) {
      procstat_metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, procstat_metric, submessage_arena);
    }
    
  } else {
    
  }
  procstat_metric_ = procstat_metric;
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.procstat_metric)
}

// .bmcmetrics.metricproto.BmcFdStatMetric fdstat_metric = 6;
inline bool BmcMetricSnapshot::_internal_has_fdstat_metric() const {
  return this != internal_default_instance() && fdstat_metric_ != nullptr;
}
inline bool BmcMetricSnapshot::has_fdstat_metric() const {
  return _internal_has_fdstat_metric();
}
inline void BmcMetricSnapshot::clear_fdstat_metric() {
  if (GetArena() == nullptr && fdstat_metric_ != nullptr) {
    delete fdstat_metric_;
  }
  fdstat_metric_ = nullptr;
}
inline const ::bmcmetrics::metricproto::BmcFdStatMetric& BmcMetricSnapshot::_internal_fdstat_metric() const {
  const ::bmcmetrics::metricproto::BmcFdStatMetric* p = fdstat_metric_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmcmetrics::metricproto::BmcFdStatMetric*>(
      &::bmcmetrics::metricproto::_BmcFdStatMetric_default_instance_);
}
inline const ::bmcmetrics::metricproto::BmcFdStatMetric& BmcMetricSnapshot::fdstat_metric() const {
  // @@protoc_insertion_point(field_get:bmcmetrics.metricproto.BmcMetricSnapshot.fdstat_metric)
  return _internal_fdstat_metric();
}
inline void BmcMetricSnapshot::unsafe_arena_set_allocated_fdstat_metric(
    ::bmcmetrics::metricproto::BmcFdStatMetric* fdstat_metric) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fdstat_metric_);
  }
  fdstat_metric_ = fdstat_metric;
  if (fdstat_metric) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.fdstat_metric)
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric* BmcMetricSnapshot::release_fdstat_metric() {
  
  ::bmcmetrics::metricproto::BmcFdStatMetric* temp = fdstat_metric_;
  fdstat_metric_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric* BmcMetricSnapshot::unsafe_arena_release_fdstat_metric() {
  // @@protoc_insertion_point(field_release:bmcmetrics.metricproto.BmcMetricSnapshot.fdstat_metric)
  
  ::bmcmetrics::metricproto::BmcFdStatMetric* temp = fdstat_metric_;
  fdstat_metric_ = nullptr;
  return temp;
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric* BmcMetricSnapshot::_internal_mutable_fdstat_metric() {
  
  if (fdstat_metric_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmcmetrics::metricproto::BmcFdStatMetric>(GetArena());
    fdstat_metric_ = p;
  }
  return fdstat_metric_;
}
inline ::bmcmetrics::metricproto::BmcFdStatMetric* BmcMetricSnapshot::mutable_fdstat_metric() {
  // @@protoc_insertion_point(field_mutable:bmcmetrics.metricproto.BmcMetricSnapshot.fdstat_metric)
  return _internal_mutable_fdstat_metric();
}
inline void BmcMetricSnapshot::set_allocated_fdstat_metric(::bmcmetrics::metricproto::BmcFdStatMetric* fdstat_metric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fdstat_metric_;
  }
  if (fdstat_metric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fdstat_metric);
    if (message_arena != submessage_arena) {
      fdstat_metric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fdstat_metric, submessage_arena);
    }
    
  } else {
    
  }
  fdstat_metric_ = fdstat_metric;
  // @@protoc_insertion_point(field_set_allocated:bmcmetrics.metricproto.BmcMetricSnapshot.fdstat_metric)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metricproto
}  // namespace bmcmetrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metricblob_2eproto
